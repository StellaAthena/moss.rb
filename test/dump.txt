package myth.zomato.tweeter.server;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.log4j.Logger; 

import myth.zomato.tweeter.client.service.ListService;
import myth.zomato.tweeter.shared.TweeterList;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.Query;
import com.google.gwt.user.server.rpc.RemoteServiceServlet;




public class Code extends RemoteServiceServlet implements ListService
{
	private List<TweeterList> listoflist=new ArrayList<TweeterList>();
	private DatastoreService datastore =
        DatastoreServiceFactory.getDatastoreService();

	@Override
	public List<TweeterList> getList()
	{

			
			listoflist.clear();

			

			Query query=new Query(ListParentKey.getKey());
			
			List<Entity> zomatolist=datastore.prepare(query).asList(FetchOptions.Builder.withDefaults());  

			Map<String, Object> listmap;

			ArrayList<String> list;

			System.err.println(zomatolist.size());

			for(Entity e:zomatolist)
			{

				listmap=e.getProperties();	

				
				Set<String> listset=listmap.keySet();
				list=new ArrayList(listset);

				
				TweeterList tweeterlist=new TweeterList(e.getKind(),list);
				listoflist.add(tweeterlist);	

			}

			return listoflist;		
	}

	@Override
	public void addList(String listname)
	{
			
			Key listkey=ListParentKey.getKey();

			
			Entity listentity=new Entity(listname,listkey);
			datastore.put(listentity);		
	}

	@Override
	public void addItem(String listname,String item)
	{
			
			Query query=new Query(listname,ListParentKey.getKey());

			Entity entity=datastore.prepare(query).asSingleEntity();

			
			entity.setProperty(item,"");	
			datastore.put(entity);
	}

	@Override
	public void deleteItem(String listname)
	{
		
		
		Query query=new Query(listname,ListParentKey.getKey());
		Entity entity=datastore.prepare(query).asSingleEntity();

		
		datastore.delete(entity.getKey());
	}

	@Override
	public void deleteIds(ArrayList<String> ids)
	{
		
		Query query=new Query(ListParentKey.getKey());
		
		List<Entity> zomatolist=datastore.prepare(query).asList(FetchOptions.Builder.withDefaults());

		Map<String, Object> listmap;

		for(int c=0;c<zomatolist.size();c++)
		{
			
			listmap=zomatolist.get(c).getProperties();	
			Set<String> listset=listmap.keySet();

			
			if(listset.contains(ids.get(0))==false) 
				continue;
			else
			{
				for(String s:ids)		
				{
					zomatolist.get(c).removeProperty(s);
				}
				datastore.put(zomatolist.get(c));	
			}
		}
	}


}
